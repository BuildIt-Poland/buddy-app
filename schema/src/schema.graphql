scalar DateTime
scalar EmailAddress
scalar PhoneNumber
scalar URL

enum TaskStatus {
  COMPLETED
  UNCOMPLETED
}

enum UserRole {
  NEWBIE
  BUDDY
}

type Query {
  newbie(newbieId: ID!): Newbie!
  buddy(buddyId: ID!): Buddy!
  task(taskId: ID!): Task!
  newbies(filter: String, first: Int): [Newbie]!
  newbieTasks(title: String, status: TaskStatus, first: Int): [Task]!
  buddyTasks(title: String, status: TaskStatus, first: Int): [Task]!
}

type Mutation {
  addBuddy(input: UserInput!): Buddy!
  addNewbie(buddyId: ID!, input: UserInput!): Newbie!
  deleteNewbie(newbieId: ID!): Newbie!
  deleteBuddy(buddyId: ID!): Buddy!
  login(email: String!, password: String!): AuthPayload!
  addNewbieTask(newbieId: ID!, input: TaskInput!): Task!
  addBuddyTask(newbieId: ID!, input: TaskInput!): Task!
  deleteTask(taskId: ID!, newbieId: ID!): Newbie!
  updateTask(taskId: ID!, input: TaskInput!): Task!
  updateTaskStatus(taskId: ID!): Task!
}

interface User {
  id: ID!
  email: EmailAddress!
  name: String!
  role: UserRole!
  position: String
  photo: URL
  phoneNumber: PhoneNumber
  startDate: DateTime
  allowPushedNotifications: Boolean!
}

input UserInput {
  email: EmailAddress!
  name: String!
  password: String!
  position: String
  photo: URL
  phoneNumber: PhoneNumber
  startDate: DateTime
}

type Buddy implements User {
  id: ID!
  email: EmailAddress!
  name: String!
  role: UserRole!
  position: String
  photo: URL
  phoneNumber: PhoneNumber
  startDate: DateTime
  allowPushedNotifications: Boolean!
  newbiesCount: Int!
  newbies: [Newbie]!
}

type Newbie implements User {
  id: ID!
  email: EmailAddress!
  name: String!
  role: UserRole!
  position: String
  photo: URL
  phoneNumber: PhoneNumber
  startDate: DateTime
  allowPushedNotifications: Boolean!
  buddy: Buddy!
  notes: String
  newbieTasks: [NewbieTask]!
  buddyTasks: [BuddyTask]!
  tasksInfo: TasksInfo!
}

type TasksInfo {
  newbieProgress: Float!
  buddyProgress: Float!
  newbieCompleted: Int!
  newbieUncompleted: Int!
  buddyCompleted: Int!
  buddyUncompleted: Int!
}

interface Task {
  id: ID!
  title: String!
  description: String!
  createdAt: DateTime!
  implementationDate: DateTime
  status: TaskStatus!
  newbie: Newbie!
}

input TaskInput {
  title: String
  description: String
  status: TaskStatus
  implementationDate: DateTime
  notes: String
}

type NewbieTask implements Task {
  id: ID!
  title: String!
  description: String!
  createdAt: DateTime!
  status: TaskStatus!
  newbie: Newbie!
  implementationDate: DateTime
  notes: String
}

type BuddyTask implements Task {
  id: ID!
  title: String!
  description: String!
  createdAt: DateTime!
  status: TaskStatus!
  newbie: Newbie!
  implementationDate: DateTime
}

type AuthPayload {
  token: String!
  role: UserRole!
  userId: ID!
}
